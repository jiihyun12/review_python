# 251015

import sys
input = sys.stdin.readline

n = int(input())

MOD = 10007

if n == 1:
    print(1)
elif n == 2:
    print(2)
else:
    dp1, dp2 = 1, 2   
    for _ in range(3, n + 1):
        dp1, dp2 = dp2, (dp1 + dp2) % MOD
    print(dp2 % MOD)

# ============================================

import sys
input = sys.stdin.readline

# n: 2 x n 직사각형의 크기
n = int(input())

# -----------------------------
# 문제 요약:
# 2 x n 보드를 1x2 또는 2x1 타일로 꽉 채우는 방법의 수를 구하라.
#
# 예시:
# n=1 → [|] 하나 → 1가지
# n=2 → [||], [=] 두 가지 → 2가지
#
# 규칙을 보면 피보나치처럼 이전 두 결과를 더한 형태로 늘어나.
# (마지막에 세로로 하나 붙이거나, 가로 두 개를 붙이는 두 경우뿐)
#
# 점화식:
# dp[n] = dp[n-1] + dp[n-2]
#
# 결과는 10007로 나눈 나머지를 출력해야 함.
# -----------------------------

MOD = 10007  # 문제에서 요구하는 나머지 연산 값

# -----------------------------
# 작은 경우(기저값) 미리 처리
# n=1 → 1가지
# n=2 → 2가지
# -----------------------------
if n == 1:
    print(1)
elif n == 2:
    print(2)
else:
    # dp[1] = 1, dp[2] = 2
    dp1, dp2 = 1, 2

    # 3부터 n까지 반복하며 점화식 적용
    # dp3 = dp2 + dp1
    # dp4 = dp3 + dp2
    # ...
    # 반복문이 한 번 돌 때마다 새로운 방법 수가 추가됨
    for _ in range(3, n + 1):
        # 이전 두 값을 더해서 현재 값을 만듦 (점화식)
        dp1, dp2 = dp2, (dp1 + dp2) % MOD

    # 마지막 계산된 dp2가 곧 dp[n]임
    print(dp2 % MOD)
